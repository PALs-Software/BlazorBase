@using BlazorBase.Abstractions.CRUD.Interfaces
@using BlazorBase.CRUD.Models

@inherits BlazorBase.CRUD.Components.Inputs.BaseInput

@if (Model != null)
{
    <Column ColumnSize="ColumnSize.IsFull" Class="">
        <Fields>
            <Field Horizontal="false">
                @if (!HidePropertyName)
                {
                    <FieldLabel ColumnSize="ColumnSize.Is12">
                        <div title="@IBaseModel.GetPropertyTooltip(ModelLocalizer, DisplayItem)">
                            @IBaseModel.GetPropertyCaption(EventServices, Model, ModelLocalizer, DisplayItem)
                        </div>
                    </FieldLabel>
                }
                <FieldBody ColumnSize="ColumnSize.Is12">
                    <div>
                        <BaseRichTextEditor @ref="BaseRichTextEditor"
                                        DbContext="DbContext"
                                        ConnectedModel="Model"
                                        HideSaveButton="true"
                                        OnContentChanged="OnContentChanged"
                                        OnSave="() => OnBeforeCardSaveChanges(null)"
                                        ReadOnly="IsReadOnly"
                                        Class="@InputClass">

                            <EditorContent>@((MarkupString)(CurrentValueAsString ?? String.Empty))</EditorContent>
                        </BaseRichTextEditor>

                        <div class="@FeedbackClass">
                            @Feedback
                        </div>
                    </div>
                </FieldBody>
            </Field>
        </Fields>
    </Column>
}