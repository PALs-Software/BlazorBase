@using BlazorBase.CRUD.Models
@using System.Globalization
@using BlazorBase.CRUD.Helper

<tr>
    <th class="th-actions">
        <Button Color="Color.Success" title="@BaseListFilterLocalizer["Reset all filters"]" Clicked="ResetAllFiltersAsync"><Icon Name="IconName.Clear" /></Button>
    </th>
    @foreach (var displayGroup in DisplayGroups)
    {
        @foreach (var displayItem in displayGroup.Value.DisplayItems.Where(p => !p.IsListProperty))
        {
            <th>

                @if (AllowedFilterTypes.Contains(displayItem.Property.PropertyType))
                {
                    if (displayItem.Property.PropertyType == typeof(string))
                    {
                        <SelectList @ref="AddToComponents" Data="@NullableTextFilterTypes" TItem="KeyValuePair<string, string>" TValue="string" TextField="(item) => item.Value" ValueField="(item) => item.Key" SelectedValueChanged="async (v) => await FilterTypeChangedAsync(displayItem, v)" />

                        <TextEdit @ref="AddToComponents" TextChanged="async (v) => await FilterChangedAsync(displayItem, v)" DelayTextOnKeyPressInterval="200" DelayTextOnKeyPress="true" />
                    }
                    else if (TypeHelper.NumericTypes.Contains(displayItem.Property.PropertyType))
                    {
                        @if (Nullable.GetUnderlyingType(displayItem.Property.PropertyType) != null)
                        {
                            <SelectList @ref="AddToComponents" Data="@NullableNumberFilterTypes" TItem="KeyValuePair<string, string>" TValue="string" TextField="(item) => item.Value" ValueField="(item) => item.Key" SelectedValueChanged="async (v) => await FilterTypeChangedAsync(displayItem, v)" />
                        }
                        else
                        {
                            <SelectList @ref="AddToComponents" Data="@NumberFilterTypes" TItem="KeyValuePair<string, string>" TValue="string" TextField="(item) => item.Value" ValueField="(item) => item.Key" SelectedValueChanged="async (v) => await FilterTypeChangedAsync(displayItem, v)" />
                        }

                        @if (TypeHelper.DecimalTypes.Contains(displayItem.Property.PropertyType))
                        {
                            <input @ref="" type="number" @oninput="async (v) => await FilterChangedAsync(displayItem, v.Value)" class="form-control" lang="@CultureInfo.CurrentUICulture.Name" step="any" />
                        }
                        else
                        {
                            <input type="number" @oninput="async (v) => await FilterChangedAsync(displayItem, v.Value)" class="form-control" lang="@CultureInfo.CurrentUICulture.Name" />
                        }
                    }
                    else if (displayItem.Property.PropertyType == typeof(bool) || displayItem.Property.PropertyType == typeof(bool?))
                    {
                        if (displayItem.Property.PropertyType == typeof(bool))
                        {
                            <SelectList @ref="AddToComponents" Data="@BoolFilterTypes" TItem="KeyValuePair<string, string>" TValue="string" TextField="(item) => item.Value" ValueField="(item) => item.Key" SelectedValueChanged="async (v) => await FilterTypeChangedAsync(displayItem, v)" />
                        }
                        else
                        {
                            <SelectList @ref="AddToComponents" Data="@NullableBoolFilterTypes" TItem="KeyValuePair<string, string>" TValue="string" TextField="(item) => item.Value" ValueField="(item) => item.Key" SelectedValueChanged="async (v) => await FilterTypeChangedAsync(displayItem, v)" />
                        }

                        <SelectList @ref="AddToComponents" Data="@BoolSelectListData" TItem="KeyValuePair<string, string>" TValue="string" TextField="(item) => item.Value" ValueField="(item) => item.Key" SelectedValueChanged="async (v) => await BooleanFilterChangedAsync(displayItem, v)" />
                    }
                    else if (displayItem.Property.PropertyType == typeof(DateTime) || displayItem.Property.PropertyType == typeof(DateTime?))
                    {
                        if (displayItem.Property.PropertyType == typeof(DateTime))
                        {
                            <SelectList @ref="AddToComponents" Data="@DateTimeFilterTypes" TItem="KeyValuePair<string, string>" TValue="string" TextField="(item) => item.Value" ValueField="(item) => item.Key" SelectedValueChanged="async (v) => await FilterTypeChangedAsync(displayItem, v)" />
                        }
                        else
                        {
                            <SelectList @ref="AddToComponents" Data="@NullableDateTimeFilterTypes" TItem="KeyValuePair<string, string>" TValue="string" TextField="(item) => item.Value" ValueField="(item) => item.Key" SelectedValueChanged="async (v) => await FilterTypeChangedAsync(displayItem, v)" />
                        }

                        <DateEdit @ref="AddToComponents" TValue="DateTime?" DateChanged="async (v) => await FilterChangedAsync(displayItem, v)" DelayTextOnKeyPressInterval="200" DelayTextOnKeyPress="true" InputMode="displayItem.DateInputMode" />
                    }
                    else if (displayItem.Property.PropertyType == typeof(Guid) || displayItem.Property.PropertyType == typeof(Guid?))
                    {
                        if (displayItem.Property.PropertyType == typeof(Guid))
                        {
                            <SelectList @ref="AddToComponents" Data="@GuidFilterTypes" TItem="KeyValuePair<string, string>" TValue="string" TextField="(item) => item.Value" ValueField="(item) => item.Key" SelectedValueChanged="async (v) => await FilterTypeChangedAsync(displayItem, v)" />
                        }
                        else
                        {
                            <SelectList @ref="AddToComponents" Data="@NullableGuidFilterTypes" TItem="KeyValuePair<string, string>" TValue="string" TextField="(item) => item.Value" ValueField="(item) => item.Key" SelectedValueChanged="async (v) => await FilterTypeChangedAsync(displayItem, v)" />
                        }

                        <TextEdit @ref="AddToComponents" TextChanged="async (v) => await FilterChangedAsync(displayItem, v)" DelayTextOnKeyPressInterval="200" DelayTextOnKeyPress="true" />
                    }
                }
            </th>
        }
    }
</tr>