@using BlazorBase.CRUD.Models
@using BlazorBase.Components

@typeparam TModel
@inherits BaseList<TModel>

<Modal @ref="Modal" Class="modal-fullscreen" Closing="OnModalClosing">
    <ModalContent Centered="true" Size="ModalSize.ExtraLarge">
        <ModalHeader>
            @if (!HideTitle)
            {
                <ModalTitle>
                    @Title
                </ModalTitle>
            }
            <CloseButton />
        </ModalHeader>
        <ModalBody>

            <table class="table table-hover table-responsive">
                <thead>
                    <tr>
                        <th class="th-actions">

                        </th>
                        @foreach (var displayGroup in DisplayGroups)
                        {
                            @foreach (var displayItem in displayGroup.Value.DisplayItems.Where(p => !p.IsListProperty))
                            {
                                <th>
                                    @IBaseModel.GetPropertyCaption(GetEventServices(Service), new TModel(), ModelLocalizer, displayItem)
                                </th>
                            }
                        }
                    </tr>
                </thead>
                <tbody>
                    <Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize ItemsProvider="LoadListDataProviderAsync" @ref="VirtualizeList">
                        <tr>
                            <td>
                                @if (!HideSelectButton)
                                {
                                    <Buttons>
                                        <Button Color="Color.Primary" Clicked="() => SelectEntry(context)">@SelectButtonText</Button>

                                        @if (AdditionalActions != null && !RenderAdditionalActionsOutsideOfButtonGroup)
                                        {
                                            @AdditionalActions(context)
                                        }
                                    </Buttons>
                                }

                                @if (AdditionalActions != null && RenderAdditionalActionsOutsideOfButtonGroup)
                                {
                                    @AdditionalActions(context)
                                }
                            </td>

                            @foreach (var displayGroup in DisplayGroups)
                            {
                                @foreach (var displayItem in displayGroup.Value.DisplayItems.Where(p => !p.IsListProperty))
                                {
                                    <td>
                                        @{
                                            var renderFragment = CheckIfPropertyRenderingIsHandledAsync(displayItem, context).Result;
                                            if (renderFragment != null)
                                            {
                                                @renderFragment
                                            }
                                            else
                                            {
                                                @if (ForeignKeyProperties.ContainsKey(displayItem.Property))
                                                {
                                                    @DisplayForeignKey(displayItem, context)
                                                }
                                                else if (displayItem.Property.PropertyType.IsEnum)
                                                {
                                                    @DisplayEnum(displayItem, context)
                                                }
                                                else
                                                {
                                                    @displayItem.Property.GetValue(context)
                                                }
                                            }
                                        }
                                    </td>
                                }
                            }
                        </tr>
                    </Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize>
                </tbody>
            </table>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="HideModal">@SelectListLocalizer["Abort"]</Button>
        </ModalFooter>
    </ModalContent>
</Modal>