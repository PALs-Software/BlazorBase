@inherits BaseDisplayComponent
@using BlazorBase.CRUD.Models
@using BlazorBase.CRUD.Extensions
@using Microsoft.Extensions.Localization;

<table class="table table-hover">
    <thead>
        <tr>
            <th>
                <Button Color="Color.Success" Clicked="AddEntryAsync"><Icon Name="IconName.Add" /></Button>
            </th>
            @foreach (var displayGroup in DisplayGroups)
            {
                @foreach (var value in displayGroup.Value)
                {
                    <td>
                        @ModelLocalizer[value.Property.Name]
                    </td>
                }
            }
        </tr>
    </thead>
    <tbody>
        @foreach (var entry in Entries)
        {
            <tr>
                <td>
                    <Buttons>
                        <Button Color="Color.Danger" Clicked="() => RemoveEntryAsync(entry)"><Icon Name=" IconName.Delete" /></Button>
                    </Buttons>
                </td>

                @foreach (var displayGroup in DisplayGroups)
                {
                    @foreach (var value in displayGroup.Value)
                    {
                        <td>
                            @if (entry is IBaseModel baseEntry)
                            {
                                // @if (ForeignKeyProperties.ContainsKey(value.Property))
                                //  {
                                // <BaseInputSelectList @ref="AddToBaseInputSelectLists" Model="baseEntry" Property="value.Property" Data="ForeignKeyProperties[value.Property]" Service="Service" OnBeforePropertyChanged="(args) => OnBeforePropertyChanged.InvokeAsync(args)" OnAfterPropertyChanged="(args) => OnAfterPropertyChanged.InvokeAsync(args)" />
                                //  }
                                // else if (value.Property.PropertyType.IsEnum)
                                //  {
                                // <BaseInputSelectList @ref="AddToBaseInputSelectLists" Model="baseEntry" Property="value.Property" Data="GetEnumValueDictionary(value.Property.PropertyType)" Service="Service" OnBeforePropertyChanged="(args) => OnBeforePropertyChanged.InvokeAsync(args)" OnAfterPropertyChanged="(args) => OnAfterPropertyChanged.InvokeAsync(args)" />
                                //  }
                                //    else
                                //  {
                                <BaseInput @ref="AddToBaseInputs" Model="baseEntry" Property="value.Property" ReadOnly="value.Property.IsKey()" Service="Service" ModelLocalizer="ModelLocalizer" OnBeforePropertyChanged="(args) => OnBeforeListPropertyChanged.InvokeAsync(new IBaseModel.OnBeforeListPropertyChangedArgs(args.Model, args.PropertyName, args.NewValue, args.EventServices))" OnAfterPropertyChanged="(args) => OnAfterListPropertyChanged.InvokeAsync(new IBaseModel.OnAfterListPropertyChangedArgs(args.Model, args.PropertyName, args.NewValue, args.IsValid, args.EventServices))" />
                                // }
                            }
                            else
                            {
                                @value.Property.GetValue(entry);
                            }

                        </td>
                    }
                }
            </tr>
        }
    </tbody>
</table>