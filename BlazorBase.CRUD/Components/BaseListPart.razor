@inherits BaseDisplayComponent
@using BlazorBase.CRUD.Models
@using BlazorBase.CRUD.Extensions
@using Microsoft.Extensions.Localization;

<table class="table table-responsive table-hover table-sm">
    <thead>
        <tr>
            <th>
                <Button Color="Color.Success" Clicked="AddEntryAsync"><Icon Name="IconName.Add" /></Button>
            </th>
            @foreach (var displayGroup in DisplayGroups)
            {
                @foreach (var displayItem in displayGroup.Value.DisplayItems.Where(p => !p.IsListProperty))
                {
                    <td>
                        @ModelLocalizer[displayItem.Property.Name]
                    </td>
                }
            }
        </tr>
    </thead>
    <tbody>
        @foreach (var entry in Entries)
        {
            <tr>
                <td>
                    <Buttons>
                        <Button Color="Color.Danger" Clicked="() => RemoveEntryAsync(entry)"><Icon Name=" IconName.Delete" /></Button>
                    </Buttons>
                </td>

                @foreach (var displayGroup in DisplayGroups)
                {
                    @foreach (var displayItem in displayGroup.Value.DisplayItems.Where(p => !p.IsListProperty))
                    {
                        <td>
                            @if (entry is IBaseModel baseEntry)
                            {
                                var renderFragment = CheckIfPropertyRenderingIsHandledAsync(displayItem, baseEntry).Result;
                                if (renderFragment != null)
                                {
                                    @renderFragment
                                }
                                else if (ForeignKeyProperties.ContainsKey(displayItem.Property))
                                {
                                    <BaseSelectListInput @ref="AddToBaseInputSelectLists" Model="baseEntry" Property="displayItem.Property" Data="ForeignKeyProperties[displayItem.Property]" ModelLocalizer="ModelLocalizer" Service="Service" OnBeforeConvertPropertyType="(args) => OnBeforeConvertListPropertyType.InvokeAsync(new IBaseModel.OnBeforeConvertListPropertyTypeArgs(args.Model, args.PropertyName, args.NewValue, args.EventServices))" OnBeforePropertyChanged="(args) => OnBeforeListPropertyChanged.InvokeAsync(new IBaseModel.OnBeforeListPropertyChangedArgs(args.Model, args.PropertyName, args.NewValue, args.EventServices))" OnAfterPropertyChanged="(args) => OnAfterListPropertyChanged.InvokeAsync(new IBaseModel.OnAfterListPropertyChangedArgs(args.Model, args.PropertyName, args.NewValue, args.IsValid, args.EventServices))" />
                                }
                                else if (displayItem.Property.PropertyType.IsEnum)
                                {
                                    <BaseSelectListInput @ref="AddToBaseInputSelectLists" Model="baseEntry" Property="displayItem.Property" Data="GetEnumValues(displayItem.Property.PropertyType)" ModelLocalizer="ModelLocalizer" Service="Service" OnBeforeConvertPropertyType="(args) => OnBeforeConvertListPropertyType.InvokeAsync(new IBaseModel.OnBeforeConvertListPropertyTypeArgs(args.Model, args.PropertyName, args.NewValue, args.EventServices))" OnBeforePropertyChanged="(args) => OnBeforeListPropertyChanged.InvokeAsync(new IBaseModel.OnBeforeListPropertyChangedArgs(args.Model, args.PropertyName, args.NewValue, args.EventServices))" OnAfterPropertyChanged="(args) => OnAfterListPropertyChanged.InvokeAsync(new IBaseModel.OnAfterListPropertyChangedArgs(args.Model, args.PropertyName, args.NewValue, args.IsValid, args.EventServices))" />
                                }
                                else
                                {
                                    <BaseInput @ref="AddToBaseInputs" Model="baseEntry" Property="displayItem.Property" ReadOnly="displayItem.Property.IsKey()" Service="Service" ModelLocalizer="ModelLocalizer" OnBeforeConvertPropertyType="(args) => OnBeforeConvertListPropertyType.InvokeAsync(new IBaseModel.OnBeforeConvertListPropertyTypeArgs(args.Model, args.PropertyName, args.NewValue, args.EventServices))" OnBeforePropertyChanged="(args) => OnBeforeListPropertyChanged.InvokeAsync(new IBaseModel.OnBeforeListPropertyChangedArgs(args.Model, args.PropertyName, args.NewValue, args.EventServices))" OnAfterPropertyChanged="(args) => OnAfterListPropertyChanged.InvokeAsync(new IBaseModel.OnAfterListPropertyChangedArgs(args.Model, args.PropertyName, args.NewValue, args.IsValid, args.EventServices))" />
                                }
                            }
                            else
                            {
                                @displayItem.Property.GetValue(entry);
                            }

                        </td>
                    }
                }
            </tr>
        }
    </tbody>
</table>
