@inherits BaseDisplayComponent
@using BlazorBase.CRUD.Attributes;
@using BlazorBase.CRUD.Enums;
@using BlazorBase.CRUD.Helper

<tr class="base-list-filter @Class">
    <th class="base-list-filter-actions">
        <Button Color="Color.Success" title="@BaseListFilterLocalizer["Reset all filters"]" Clicked="ResetAllFiltersAsync"><Icon Name="IconName.Clear" /></Button>
    </th>

    @foreach (var displayGroup in ListDisplayGroups)
    {
        @foreach (var displayItem in displayGroup.Value.DisplayItems.Where(p => !p.IsListProperty))
        {
            <th class="@displayItem.CustomizationClasses[CustomizationLocation.ListHeaderCell]" style="@displayItem.CustomizationStyles[CustomizationLocation.ListHeaderCell]">
                @if (displayItem.IsFilterable && (AllowedFilterTypes.Contains(displayItem.DisplayPropertyType) || displayItem.DisplayPropertyType.IsEnum || Nullable.GetUnderlyingType(displayItem.DisplayPropertyType)?.IsEnum == true))
                {
                    <Addons Class="flex-nowrap">

                        <Addon AddonType="AddonType.Start">
                            <SelectList @ref="AddToComponents" SelectedValue="displayItem.FilterType" Data="@TypeFilterTypesDictionary[displayItem.DisplayPropertyType]" TItem="KeyValuePair<FilterType, string>" TValue="FilterType" TextField="(item) => item.Value" ValueField="(item) => item.Key" SelectedValueChanged="async (newValue) => await FilterTypeChangedAsync(displayItem, newValue)" />
                        </Addon>

                        @if (displayItem.DisplayPropertyType == typeof(string) || TypeHelper.NumericTypes.Contains(displayItem.DisplayPropertyType))
                        {
                            <BaseDelayInput @ref="AddToComponents" DeviatingConvertType="displayItem.DisplayPropertyType" @bind-Value="@displayItem.FilterValue" OnDelayedInput="async (v) => await FilterChangedAsync(displayItem, v.Value, setFilterValue: false)" />
                        }
                        else if (TypeHelper.DecimalTypes.Contains(displayItem.DisplayPropertyType))
                        {
                            <BaseDelayInput @ref="AddToComponents" step="any" DeviatingConvertType="displayItem.DisplayPropertyType" @bind-Value="@displayItem.FilterValue" OnDelayedInput="async (v) => await FilterChangedAsync(displayItem, v.Value, setFilterValue: false)" />
                        }
                        else if (displayItem.DisplayPropertyType == typeof(bool) || displayItem.DisplayPropertyType == typeof(bool?))
                        {
                            <SelectList @ref="AddToComponents" SelectedValue="displayItem.FilterValue?.ToString()" Data="@BoolSelectListData" TItem="KeyValuePair<string, string>" TValue="string" TextField="(item) => item.Value" ValueField="(item) => item.Key" SelectedValueChanged="async (v) => await BooleanFilterChangedAsync(displayItem, v)" Class="form-control" />
                        }
                        else if (displayItem.DisplayPropertyType == typeof(DateTime) || displayItem.DisplayPropertyType == typeof(DateTime?))
                        {
                            <DateEdit @ref="AddToComponents" Date="(DateTime?)displayItem.FilterValue" TValue="DateTime?" DateChanged="async (v) => await FilterChangedAsync(displayItem, v)" DelayTextOnKeyPressInterval="200" DelayTextOnKeyPress="true" InputMode="displayItem.DateInputMode" />
                        }
                        else if (displayItem.DisplayPropertyType == typeof(TimeSpan) || displayItem.DisplayPropertyType == typeof(TimeSpan?))
                        {
                            <TimeEdit @ref="AddToComponents" Time="(TimeSpan?)displayItem.FilterValue" TValue="TimeSpan?" TimeChanged="async (v) => await FilterChangedAsync(displayItem, v)" DelayTextOnKeyPressInterval="200" DelayTextOnKeyPress="true" />
                        }
                        else if (displayItem.DisplayPropertyType == typeof(Guid) || displayItem.DisplayPropertyType == typeof(Guid?))
                        {
                            <BaseDelayInput @ref="AddToComponents" DeviatingConvertType="typeof(string)" @bind-Value="@displayItem.FilterValue" OnDelayedInput="async (v) => await FilterChangedAsync(displayItem, v.Value, setFilterValue: false)" />
                        }
                        else if (displayItem.DisplayPropertyType.IsEnum || Nullable.GetUnderlyingType(displayItem.DisplayPropertyType)?.IsEnum == true)
                        {
                            <SelectList @ref="AddToComponents" SelectedValue="@displayItem.FilterValue?.ToString()" Data="@GetEnumValues(displayItem.DisplayPropertyType)" TItem="KeyValuePair<string, string>" TValue="string" TextField="(item) => item.Value" ValueField="(item) => item.Key" SelectedValueChanged="async (v) => await FilterChangedAsync(displayItem, v)" Class="form-control" />
                        }
                    </Addons>
                }
            </th>
        }
    }

    @ChildContent

    <th class="bottom-border-line" />
</tr>