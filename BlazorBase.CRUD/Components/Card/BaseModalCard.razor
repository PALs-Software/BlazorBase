@typeparam TModel

<div class="base-card">
    <Modal @ref="Modal" Class="modal-fullscreen" Closing="OnModalClosing">
        <ModalContent Centered="true" Size="ModalSize.ExtraLarge">
            <ModalHeader>
                <ModalTitle>
                    @if (ViewMode)
                    {
                        <span>@Title</span>
                    }
                    else
                    {
                        <span>@Title</span>
                        <Button Color="Color.Success" Clicked="SaveModalAsync">@Localizer["Save"]</Button>
                    }
                </ModalTitle>
                <CloseButton />
            </ModalHeader>
            <ModalBody>
                <BaseCard @ref="BaseCard"
                          TModel="TModel"
                          SingleDisplayName="@SingleDisplayName"
                          Embedded="true"
                          ShowActions="ShowActions"
                          ShowEntryByStart="ShowEntryByStart"
                          ComponentModelInstance="ComponentModelInstance"
                          EntryToBeShownByStart="(args) => EntryToBeShownByStart(args)"
                          OnTitleCalculated="OnTitleCalculated"
                          OnAfterGetVisibleProperties="GetVisiblePropertiesAsync"
                          OnCreateNewEntryInstance="OnCreateNewEntryInstance"
                          OnGuiLoadData="OnGuiLoadData"
                          OnBeforeAddEntry="OnBeforeAddEntry"
                          OnAfterAddEntry="OnAfterAddEntry"
                          OnBeforeUpdateEntry="OnBeforeUpdateEntry"
                          OnAfterUpdateEntry="OnAfterUpdateEntry"
                          OnBeforeConvertPropertyType="OnBeforeConvertPropertyType"
                          OnBeforePropertyChanged="OnBeforePropertyChanged"
                          OnAfterPropertyChanged="OnAfterPropertyChanged"
                          OnBeforeSaveChanges="OnBeforeSaveChanges"
                          OnAfterSaveChanges="OnAfterSaveChanges"
                          OnCreateNewListEntryInstance="OnCreateNewListEntryInstance"
                          OnBeforeAddListEntry="OnBeforeAddListEntry"
                          OnAfterAddListEntry="OnAfterAddListEntry"
                          OnBeforeRemoveListEntry="OnBeforeRemoveListEntry"
                          OnAfterRemoveListEntry="OnAfterRemoveListEntry"
                          OnBeforeConvertListPropertyType="OnBeforeConvertListPropertyType"
                          OnBeforeListPropertyChanged="OnBeforeListPropertyChanged"
                          OnAfterListPropertyChanged="OnAfterListPropertyChanged"
                          OnAfterMoveListEntryUp="OnAfterMoveListEntryUp"
                          OnAfterMoveListEntryDown="OnAfterMoveListEntryDown" />
            </ModalBody>
            @if (!String.IsNullOrEmpty(ExplainText))
            {
                <ModalFooter Style="justify-content:flex-start">
                    @foreach (var item in ExplainText.Split(new string[] { Environment.NewLine }, StringSplitOptions.None))
                    {
                        @item
                        <br />
                    }
                </ModalFooter>
            }
            <ModalFooter>
                <Button Color="Color.Secondary" Clicked="HideModal">@Localizer["Close"]</Button>
                @if (!ViewMode)
                {
                    <Button Color="Color.Success" Clicked="SaveModalAsync">@Localizer["Save"]</Button>
                    <Button Color="Color.Primary" Clicked="SaveAndCloseModalAsync">@Localizer["Save & Close"]</Button>
                }
            </ModalFooter>
        </ModalContent>
    </Modal>
</div>