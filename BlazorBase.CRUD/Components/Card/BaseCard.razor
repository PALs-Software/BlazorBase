@using BlazorBase.Abstractions.CRUD.Enums
@using BlazorBase.Abstractions.CRUD.Interfaces
@using BlazorBase.CRUD.Models

@typeparam TModel
@inherits BaseDisplayComponent

<div class="base-card">

    @if (!Embedded)
    {
        <Heading Margin="Margin.Is2.FromTop">
            @if (ViewMode)
            {
                <span>@Title</span>
            }
            else
            {
                <span>@Title</span>
                <Button Color="Blazorise.Color.Success" Clicked="async () => await SaveCardAsync()">@Localizer["Save"]</Button>
            }
        </Heading>
    }

    @if (Model != null && ModelLoaded)
    {
        <PageTitle>@PageTitle | @BlazorBaseOptions.ShortWebsiteName</PageTitle>

        if (ShowActions)
        {
            <BasePageActions @ref="PageActions" Source="this"
                             BaseModel="Model"
                             InvokeActionParameter="Model"
                             BaseModelType="TModelType"
                             GUIType="GUIType.Card"
                             EventServices="EventServices"
                             ModelLocalizer="ModelLocalizer"
                             OnPageActionInvoked="OnPageActionInvokedAsync"
                             AdditionalPageActions="AdditionalHeaderPageActions" />
        }

        <Alert Class="invalid-summary-feedback" Color="Blazorise.Color.Danger" Visible="ShowInvalidFeedback">
            @InvalidSummaryFeedback
        </Alert>

        <Accordion>
            @foreach (var displayGroup in DisplayGroups)
            {
                <Collapse Visible="!displayGroup.Value.GroupAttribute.Collapsed">
                    <CollapseHeader>
                        <Heading Size="HeadingSize.Is4">
                            <Button Clicked="@(() => displayGroup.Value.GroupAttribute.Collapsed = !displayGroup.Value.GroupAttribute.Collapsed)">@ModelLocalizer[displayGroup.Key]</Button>
                        </Heading>
                    </CollapseHeader>
                    <CollapseBody>
                        <Row class="@($"base-card-row-{displayGroup.Key.ToLower()}")">
                            @foreach (var displayItem in displayGroup.Value.DisplayItems)
                            {
                                var renderFragment = CheckIfPropertyRenderingIsHandledAsync(displayItem, displayItem.IsReadOnly || !AddingMode && displayItem.IsKey || ViewMode).Result;
                                if (renderFragment != null)
                                {
                                    @renderFragment
                                }
                                else if (displayItem.IsListProperty)
                                {
                                    @if (displayItem.IsPrimitiveListType)
                                    {
                                        <BasePrimitiveListPart @ref="AddToBasePrimitiveListParts"
                                                               Model="Model"
                                                               Property="displayItem.Property"
                                                               Caption="@IBaseModel.GetPropertyCaption(EventServices, Model, ModelLocalizer, displayItem)"
                                                               DbContext="DbContext"
                                                               ReadOnly="displayItem.IsReadOnly || !AddingMode && displayItem.IsKey || ViewMode"
                                                               OnAfterGetVisibleProperties="OnAfterGetVisibleProperties"
                                                               OnAfterSetUpDisplayLists="OnAfterSetUpDisplayLists"
                                                               OnCreateNewListEntryInstance="OnCreateNewListEntryInstance"
                                                               OnBeforeAddListEntry="OnBeforeAddListEntry"
                                                               OnAfterAddListEntry="OnAfterAddListEntry"
                                                               OnBeforeRemoveListEntry="OnBeforeRemoveListEntry"
                                                               OnAfterRemoveListEntry="OnAfterRemoveListEntry"
                                                               OnBeforeConvertListPropertyType="OnBeforeConvertListPropertyType"
                                                               OnBeforeListPropertyChanged="OnBeforeListPropertyChanged"
                                                               OnAfterListPropertyChanged="OnAfterListPropertyChanged"
                                                               OnAfterMoveListEntryUp="OnAfterMoveListEntryUp"
                                                               OnAfterMoveListEntryDown="OnAfterMoveListEntryDown" />
                                    }
                                    else
                                    {

                                        <BaseListPart @ref="AddToBaseListParts"
                                                      Model="Model"
                                                      Property="displayItem.Property"
                                                      DbContext="DbContext"
                                                      ReadOnly="displayItem.IsReadOnly || !AddingMode && displayItem.IsKey || ViewMode"
                                                      OnAfterGetVisibleProperties="OnAfterGetVisibleProperties"
                                                      OnAfterSetUpDisplayLists="OnAfterSetUpDisplayLists"
                                                      OnCreateNewListEntryInstance="OnCreateNewListEntryInstance"
                                                      OnBeforeAddListEntry="OnBeforeAddListEntry"
                                                      OnAfterAddListEntry="OnAfterAddListEntry"
                                                      OnBeforeRemoveListEntry="OnBeforeRemoveListEntry"
                                                      OnAfterRemoveListEntry="OnAfterRemoveListEntry"
                                                      OnBeforeConvertListPropertyType="OnBeforeConvertListPropertyType"
                                                      OnBeforeListPropertyChanged="OnBeforeListPropertyChanged"
                                                      OnAfterListPropertyChanged="OnAfterListPropertyChanged"
                                                      OnAfterMoveListEntryUp="OnAfterMoveListEntryUp"
                                                      OnAfterMoveListEntryDown="OnAfterMoveListEntryDown" />
                                    }
                                }
                                else
                                {
                                    <Column ColumnSize="ColumnSize.Is6.OnFullHD.Is12.OnWidescreen" Class="col-xxl-4">
                                        <Fields>
                                            <Field Horizontal="true">
                                                <FieldLabel ColumnSize="ColumnSize.Is4" Class="text-truncate" title="@IBaseModel.GetPropertyTooltip(ModelLocalizer, displayItem)">@IBaseModel.GetPropertyCaption(EventServices, Model, ModelLocalizer, displayItem)</FieldLabel>
                                                <FieldBody ColumnSize="ColumnSize.Is8">
                                                    @if (UsesCustomLookupDataProperties.ContainsKey(displayItem.Property))
                                                    {
                                                        <BaseSelectListInput @ref="AddToBaseSelectListInputs" Model="Model" Property="displayItem.Property" ReadOnly="displayItem.IsReadOnly || !AddingMode && displayItem.IsKey || ViewMode" Data="UsesCustomLookupDataProperties[displayItem.Property].LookupData" DbContext="DbContext" ModelLocalizer="ModelLocalizer" DisplayItem="displayItem" OnBeforeConvertPropertyType="(args) => OnBeforeConvertPropertyType.InvokeAsync(args)" OnBeforePropertyChanged="(args) => OnBeforePropertyChanged.InvokeAsync(args)" OnAfterPropertyChanged="(args) => OnAfterPropertyChanged.InvokeAsync(args)" />
                                                    }
                                                    else if (ForeignKeyProperties.ContainsKey(displayItem.Property))
                                                    {
                                                        <BaseSelectListInput @ref="AddToBaseSelectListInputs" Model="Model" Property="displayItem.Property" ReadOnly="displayItem.IsReadOnly || !AddingMode && displayItem.IsKey || ViewMode" Data="ForeignKeyProperties[displayItem.Property]" DbContext="DbContext" ModelLocalizer="ModelLocalizer" DisplayItem="displayItem" OnBeforeConvertPropertyType="(args) => OnBeforeConvertPropertyType.InvokeAsync(args)" OnBeforePropertyChanged="(args) => OnBeforePropertyChanged.InvokeAsync(args)" OnAfterPropertyChanged="(args) => OnAfterPropertyChanged.InvokeAsync(args)" />
                                                    }
                                                    else if (displayItem.Property.PropertyType.IsEnum || Nullable.GetUnderlyingType(displayItem.Property.PropertyType)?.IsEnum == true)
                                                    {
                                                        <BaseSelectListInput @ref="AddToBaseSelectListInputs" Model="Model" Property="displayItem.Property" ReadOnly="displayItem.IsReadOnly || !AddingMode && displayItem.IsKey || ViewMode" Data="GetEnumValues(displayItem.Property.PropertyType)" DbContext="DbContext" ModelLocalizer="ModelLocalizer" DisplayItem="displayItem" OnBeforeConvertPropertyType="(args) => OnBeforeConvertPropertyType.InvokeAsync(args)" OnBeforePropertyChanged="(args) => OnBeforePropertyChanged.InvokeAsync(args)" OnAfterPropertyChanged="(args) => OnAfterPropertyChanged.InvokeAsync(args)" />
                                                    }
                                                    else
                                                    {
                                                        <BaseInput @ref="AddToBaseInputs" Model="Model" Property="displayItem.Property" ReadOnly="displayItem.IsReadOnly || !AddingMode && displayItem.IsKey || ViewMode" DbContext="DbContext" ModelLocalizer="ModelLocalizer" DisplayItem="displayItem" OnBeforeConvertPropertyType="(args) => OnBeforeConvertPropertyType.InvokeAsync(args)" OnBeforePropertyChanged="(args) => OnBeforePropertyChanged.InvokeAsync(args)" OnAfterPropertyChanged="(args) => OnAfterPropertyChanged.InvokeAsync(args)" />
                                                    }

                                                    @if (IBaseModel.GetFieldHelpCaption(ModelLocalizer, displayItem, out string fieldHelpCaption))
                                                    {
                                                        <FieldHelp>@fieldHelpCaption</FieldHelp>
                                                    }
                                                </FieldBody>
                                            </Field>
                                        </Fields>
                                    </Column>
                                }
                            }
                        </Row>
                    </CollapseBody>
                </Collapse>
            }
        </Accordion>
    }

    @if (PageActions?.CurrentActionRenderFragment != null)
    {
        @PageActions?.CurrentActionRenderFragment
    }
</div>