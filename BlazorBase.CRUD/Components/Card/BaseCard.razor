@using BlazorBase.CRUD.Models

@typeparam TModel
@inherits BaseDisplayComponent

<div class="base-card">

    @if (!Embedded)
    {
        <Heading Margin="Margin.Is2.FromTop">
            @if (ViewMode)
            {
                <span>@Localizer["View {0}", SingleDisplayName]</span>
            }
            else
            {
                <span>@Localizer["Edit {0}", SingleDisplayName]</span>
                <Button Color="Color.Success" Clicked="async () => await SaveCardAsync()">@Localizer["Save"]</Button>
            }
        </Heading>
    }

    @if (Model != null && ModelLoaded)
    {
        if (ShowActions)
        {
            <BasePageActions BaseModel="Model" BaseModelType="TModelType" GUIType="Enums.GUIType.Card" EventServices="EventServices" ModelLocalizer="ModelLocalizer" OnPageActionInvoked="OnPageActionInvokedAsync" />
        }

        <Alert Class="invalid-summary-feedback" Color="Color.Danger" Visible="ShowInvalidFeedback">
            @InvalidSummaryFeedback
        </Alert>

        <Accordion>
            @foreach (var displayGroup in DisplayGroups)
            {
                <Collapse Visible="!displayGroup.Value.GroupAttribute.Collapsed">
                    <CollapseHeader>
                        <Heading Size="HeadingSize.Is4">
                            <Button Clicked="@(() => displayGroup.Value.GroupAttribute.Collapsed = !displayGroup.Value.GroupAttribute.Collapsed)">@ModelLocalizer[displayGroup.Key]</Button>
                        </Heading>
                    </CollapseHeader>
                    <CollapseBody>
                        <Row class="@($"base-card-row-{displayGroup.Key.ToLower()}")">
                            @foreach (var displayItem in displayGroup.Value.DisplayItems)
                            {
                                var renderFragment = CheckIfPropertyRenderingIsHandledAsync(displayItem, displayItem.IsReadOnly || !AddingMode && displayItem.IsKey || ViewMode).Result;
                                if (renderFragment != null)
                                {
                                    @renderFragment
                                }
                                else if (displayItem.IsListProperty)
                                {
                                    <BaseListPart @ref="AddToBaseListParts"
                                        Model="Model"
                                        Property="displayItem.Property"
                                        Service="Service"
                                        ReadOnly="displayItem.IsReadOnly || !AddingMode && displayItem.IsKey || ViewMode"
                                        OnCreateNewListEntryInstance="(args) => OnCreateNewListEntryInstance.InvokeAsync(args)"
                                        OnBeforeAddListEntry="(args) => OnBeforeAddListEntry.InvokeAsync(args)"
                                        OnAfterAddListEntry="(args) => OnAfterAddListEntry.InvokeAsync(args)"
                                        OnBeforeRemoveListEntry="(args) => OnBeforeRemoveListEntry.InvokeAsync(args)"
                                        OnAfterRemoveListEntry="(args) => OnAfterRemoveListEntry.InvokeAsync(args)"
                                        OnBeforeConvertListPropertyType="(args) => OnBeforeConvertListPropertyType.InvokeAsync(args)"
                                        OnBeforeListPropertyChanged="(args) => OnBeforeListPropertyChanged.InvokeAsync(args)"
                                        OnAfterListPropertyChanged="(args) => OnAfterListPropertyChanged.InvokeAsync(args)"
                                        OnAfterMoveListEntryUp="(args) => OnAfterMoveListEntryUp.InvokeAsync(args)"
                                        OnAfterMoveListEntryDown="(args) => OnAfterMoveListEntryDown.InvokeAsync(args)" />
                                }
                                else if (ComponentModelInstance == null || !ComponentModelInstance.PropertyNamesToRemoveFromListView.Contains(displayItem.Property.Name))
                                {
                                    <Column ColumnSize="ColumnSize.Is6.OnFullHD.Is12.OnWidescreen" Class="col-xxl-4">
                                        <Fields>
                                            <Field Horizontal="true">
                                                <FieldLabel ColumnSize="ColumnSize.Is4" Class="text-truncate" title="@IBaseModel.GetPropertyTooltip(ModelLocalizer, displayItem)">@IBaseModel.GetPropertyCaption(EventServices, Model, ModelLocalizer, displayItem)</FieldLabel>
                                                <FieldBody ColumnSize="ColumnSize.Is8">
                                                    @if (UsesCustomLookupDataProperties.ContainsKey(displayItem.Property))
                                                    {
                                                        <BaseSelectListInput @ref="AddToBaseSelectListInputs" Model="Model" Property="displayItem.Property" ReadOnly="displayItem.IsReadOnly || !AddingMode && displayItem.IsKey || ViewMode" Data="UsesCustomLookupDataProperties[displayItem.Property]" Service="Service" ModelLocalizer="ModelLocalizer" DisplayItem="displayItem" OnBeforeConvertPropertyType="(args) => OnBeforeConvertPropertyType.InvokeAsync(args)" OnBeforePropertyChanged="(args) => OnBeforePropertyChanged.InvokeAsync(args)" OnAfterPropertyChanged="(args) => OnAfterPropertyChanged.InvokeAsync(args)" />
                                                    }
                                                    else if (ForeignKeyProperties.ContainsKey(displayItem.Property))
                                                    {
                                                        <BaseSelectListInput @ref="AddToBaseSelectListInputs" Model="Model" Property="displayItem.Property" ReadOnly="displayItem.IsReadOnly || !AddingMode && displayItem.IsKey || ViewMode" Data="ForeignKeyProperties[displayItem.Property]" Service="Service" ModelLocalizer="ModelLocalizer" DisplayItem="displayItem" OnBeforeConvertPropertyType="(args) => OnBeforeConvertPropertyType.InvokeAsync(args)" OnBeforePropertyChanged="(args) => OnBeforePropertyChanged.InvokeAsync(args)" OnAfterPropertyChanged="(args) => OnAfterPropertyChanged.InvokeAsync(args)" />
                                                    }
                                                    else if (displayItem.Property.PropertyType.IsEnum)
                                                    {
                                                        <BaseSelectListInput @ref="AddToBaseSelectListInputs" Model="Model" Property="displayItem.Property" ReadOnly="displayItem.IsReadOnly || !AddingMode && displayItem.IsKey || ViewMode" Data="GetEnumValues(displayItem.Property.PropertyType)" Service="Service" ModelLocalizer="ModelLocalizer" DisplayItem="displayItem" OnBeforeConvertPropertyType="(args) => OnBeforeConvertPropertyType.InvokeAsync(args)" OnBeforePropertyChanged="(args) => OnBeforePropertyChanged.InvokeAsync(args)" OnAfterPropertyChanged="(args) => OnAfterPropertyChanged.InvokeAsync(args)" />
                                                    }
                                                    else
                                                    {
                                                        <BaseInput @ref="AddToBaseInputs" Model="Model" Property="displayItem.Property" ReadOnly="displayItem.IsReadOnly || !AddingMode && displayItem.IsKey || ViewMode" Service="Service" ModelLocalizer="ModelLocalizer" DisplayItem="displayItem" OnBeforeConvertPropertyType="(args) => OnBeforeConvertPropertyType.InvokeAsync(args)" OnBeforePropertyChanged="(args) => OnBeforePropertyChanged.InvokeAsync(args)" OnAfterPropertyChanged="(args) => OnAfterPropertyChanged.InvokeAsync(args)" />
                                                    }

                                                    @if(IBaseModel.GetFieldHelpCaption(ModelLocalizer, displayItem, out string fieldHelpCaption))
                                                    {
                                                        <FieldHelp>@fieldHelpCaption</FieldHelp>
                                                    }                                                    
                                                </FieldBody>
                                            </Field>
                                        </Fields>
                                    </Column>
                                }
                            }
                        </Row>
                    </CollapseBody>
                </Collapse>
            }
        </Accordion>
    }
</div>

<Snackbar @ref="Snackbar"
          Color="ShowInvalidFeedback ? SnackbarColor.Danger : SnackbarColor.Success"
          Multiline="true">
    <SnackbarBody>
        @if (ShowInvalidFeedback)
        {
            @InvalidSummaryFeedback
        }
        else
        {
            @Localizer["Information was saved successfully"]
        }
    </SnackbarBody>
</Snackbar>
