@using System.ComponentModel.DataAnnotations;
@using Blazorise.RichTextEdit

<div>
    @if (Model != null)
    {
        if (RenderType == typeof(string) || DecimalTypes.Contains(RenderType))
        {
            if (PresentationDataType == DataType.MultilineText)
            {
                <RichTextEdit @ref="RichTextEditRef"
                              Theme="RichTextEditTheme.Snow"
                              ReadOnly="@IsReadOnly"
                              SubmitOnEnter="false"
                              EnterPressed="@OnSave"
                              ToolbarPosition="Placement.Top">
                    <Editor>@((MarkupString)CurrentValueAsString)</Editor>
                    <Toolbar>
                        <RichTextEditToolbarGroup>
                            <RichTextEditToolbarSelect Action="RichTextEditAction.Header">
                                <RichTextEditToolbarSelectItem Value="false" />
                                <RichTextEditToolbarSelectItem Value="1" />
                                <RichTextEditToolbarSelectItem Value="2" />
                                <RichTextEditToolbarSelectItem Value="3" />
                                <RichTextEditToolbarSelectItem Value="4" />
                                <RichTextEditToolbarSelectItem Value="5" />
                                <RichTextEditToolbarSelectItem Value="6" />
                            </RichTextEditToolbarSelect>
                            <RichTextEditToolbarSelect Action="RichTextEditAction.Font"></RichTextEditToolbarSelect>
                        </RichTextEditToolbarGroup>
                        <RichTextEditToolbarGroup>
                            <RichTextEditToolbarButton Action="RichTextEditAction.Bold" />
                            <RichTextEditToolbarButton Action="RichTextEditAction.Italic" />
                            <RichTextEditToolbarButton Action="RichTextEditAction.Underline" />
                            <RichTextEditToolbarButton Action="RichTextEditAction.Strike" />
                        </RichTextEditToolbarGroup>
                        <RichTextEditToolbarGroup>
                            <RichTextEditToolbarSelect Action="RichTextEditAction.Color"></RichTextEditToolbarSelect>
                            <RichTextEditToolbarSelect Action="RichTextEditAction.Background"></RichTextEditToolbarSelect>
                        </RichTextEditToolbarGroup>
                        <RichTextEditToolbarGroup>
                            <RichTextEditToolbarButton Action="RichTextEditAction.Script" Value="sub" />
                            <RichTextEditToolbarButton Action="RichTextEditAction.Script" Value="super" />
                        </RichTextEditToolbarGroup>
                        <RichTextEditToolbarGroup>
                            <RichTextEditToolbarButton Action="RichTextEditAction.List" Value="ordered" />
                            <RichTextEditToolbarButton Action="RichTextEditAction.List" Value="bullet" />
                        </RichTextEditToolbarGroup>
                        <RichTextEditToolbarGroup>
                            <RichTextEditToolbarButton Action="RichTextEditAction.Indent" Value="-1" />
                            <RichTextEditToolbarSelect Action="RichTextEditAction.Align"></RichTextEditToolbarSelect>
                            <RichTextEditToolbarButton Action="RichTextEditAction.Indent" Value="+1" />
                        </RichTextEditToolbarGroup>
                        <RichTextEditToolbarGroup>
                            <RichTextEditToolbarButton Action="RichTextEditAction.Direction" Value="rtl" />
                            <RichTextEditToolbarButton Action="RichTextEditAction.Blockquote" />
                            <RichTextEditToolbarButton Action="RichTextEditAction.CodeBlock" />
                        </RichTextEditToolbarGroup>
                        <RichTextEditToolbarGroup Float="Float.Right">
                            <Button Clicked="@OnSave"><Icon Name="IconName.Save" /></Button>
                        </RichTextEditToolbarGroup>
                    </Toolbar>
                </RichTextEdit>
            }
            else if (PresentationDataType == DataType.MultilineText)
            {
                <textarea value="@CurrentValueAsString" @onchange="async (v) => await OnValueChangedAsync(v)" @attributes="InputAttributes" class="form-control @InputClass"></textarea>
            }
            else
            {
                <input type="@InputType" value="@CurrentValueAsString" @onchange="async (v) => await OnValueChangedAsync(v)" @attributes="InputAttributes" class="form-control @InputClass" />
            }
        }
        else if (RenderType == typeof(bool))
        {
            <Check TValue="bool" Checked="(bool)Property.GetValue(Model)" CheckedChanged="(v) => OnValueChangedAsync(v)" Disabled="IsReadOnly" ReadOnly="IsReadOnly" Class="@InputClass" Attributes="InputAttributes" />
        }
        else if (RenderType == typeof(bool?))
        {
            <Check TValue="bool?" Checked="(bool?)Property.GetValue(Model)" CheckedChanged="(v) => OnValueChangedAsync(v)" Disabled="IsReadOnly" ReadOnly="IsReadOnly" Class="@InputClass" Attributes="InputAttributes" />
        }
        else if (RenderType == typeof(DateTime))
        {
            <DateEdit TValue="DateTime" Date="(DateTime)Property.GetValue(Model)" DateChanged="(v) => OnValueChangedAsync(v)" ReadOnly="IsReadOnly" Placeholder="@PlaceHolder" Class="@InputClass" InputMode="DisplayItem.DateInputMode" Attributes="InputAttributes" />
        }
        else if (RenderType == typeof(DateTime?))
        {
            <DateEdit TValue="DateTime?" Date="(DateTime?)Property.GetValue(Model)" DateChanged="(v) => OnValueChangedAsync(v)" ReadOnly="IsReadOnly" Placeholder="@PlaceHolder" Class="@InputClass" InputMode="DisplayItem.DateInputMode" Attributes="InputAttributes" />
        }
        else if (RenderType == typeof(DateTimeOffset))
        {
            <DateEdit TValue="DateTimeOffset" Date="(DateTimeOffset)Property.GetValue(Model)" DateChanged="(v) => OnValueChangedAsync(v)" ReadOnly="IsReadOnly" Placeholder="@PlaceHolder" Class="@InputClass" InputMode="DisplayItem.DateInputMode" Attributes="InputAttributes" />
        }
        else if (RenderType == typeof(DateTimeOffset?))
        {
            <DateEdit TValue="DateTimeOffset?" Date="(DateTimeOffset?)Property.GetValue(Model)" DateChanged="(v) => OnValueChangedAsync(v)" ReadOnly="IsReadOnly" Placeholder="@PlaceHolder" Class="@InputClass" InputMode="DisplayItem.DateInputMode" Attributes="InputAttributes" />
        }
        else if (RenderType == typeof(Guid))
        {
            <TextEdit Text="@(Property.GetValue(Model).ToString())" TextChanged="(v) => OnValueChangedAsync(v)" ReadOnly="IsReadOnly" Placeholder="@PlaceHolder" Class="@InputClass" Attributes="InputAttributes" />
        }
        else if (RenderType == typeof(Guid?))
        {
            <TextEdit Text="@(Property.GetValue(Model)?.ToString())" TextChanged="(v) => OnValueChangedAsync(v)" ReadOnly="IsReadOnly" Placeholder="@PlaceHolder" Class="@InputClass" Attributes="InputAttributes" />
        }

        <div class="@FeedbackClass">
            @Feedback
        </div>
    }
</div>