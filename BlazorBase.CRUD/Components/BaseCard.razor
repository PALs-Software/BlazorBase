@typeparam TModel
@inherits BaseDisplayComponent

@using BlazorBase.CRUD.Extensions
@using Microsoft.Extensions.Localization

<div class="base-card">
    <Modal @ref="Modal" Class="modal-fullscreen">
        <ModalContent Centered="true" Size="ModalSize.ExtraLarge">
            <ModalHeader>
                <ModalTitle>@Title</ModalTitle>
                <CloseButton Clicked="RejectModal" />
            </ModalHeader>
            <ModalBody>
                @if (Entry != null)
                {
                    <Alert Class="card-summary-invalid-feedback" Color="Color.Danger" Visible="ShowInvalidFeedback">
                        @CardSummaryInvalidFeedback
                    </Alert>

                    <Accordion>
                        @foreach (var displayGroup in DisplayGroups)
                        {
                            <Collapse Visible="!displayGroup.Value.First().Attribute.Collapsed">
                                <CollapseHeader>
                                    <Heading Size="HeadingSize.Is4">
                                        <Button Clicked="@(() => displayGroup.Value.First().Attribute.Collapsed = !displayGroup.Value.First().Attribute.Collapsed)">@ModelLocalizer[displayGroup.Key]</Button>
                                    </Heading>
                                </CollapseHeader>
                                <CollapseBody>
                                    <Row>
                                        @foreach (var value in displayGroup.Value)
                                        {
                                            <Column ColumnSize="ColumnSize.Is6.OnFullHD.Is12.OnWidescreen" Class="col-xxl-4">
                                                <Fields>
                                                    <Field Horizontal="true">
                                                        <FieldLabel ColumnSize="ColumnSize.Is4">@ModelLocalizer[value.Property.Name]</FieldLabel>
                                                        <FieldBody ColumnSize="ColumnSize.Is8">
                                                            @if (ForeignKeyProperties.ContainsKey(value.Property))
                                                            {
                                                                <BaseInputSelectList @ref="AddToBaseInputSelectLists" Model="Entry" Property="value.Property" Data="ForeignKeyProperties[value.Property]" Service="Service" ModelLocalizer="ModelLocalizer" OnBeforePropertyChanged="(args) => OnBeforePropertyChanged.InvokeAsync(args)" OnAfterPropertyChanged="(args) => OnAfterPropertyChanged.InvokeAsync(args)" />
                                                            }
                                                            else if (value.Property.PropertyType.IsEnum)
                                                            {
                                                                <BaseInputSelectList @ref="AddToBaseInputSelectLists" Model="Entry" Property="value.Property" Data="GetEnumValueDictionary(value.Property.PropertyType)" Service="Service" ModelLocalizer="ModelLocalizer" OnBeforePropertyChanged="(args) => OnBeforePropertyChanged.InvokeAsync(args)" OnAfterPropertyChanged="(args) => OnAfterPropertyChanged.InvokeAsync(args)" />
                                                            }
                                                            else
                                                            {
                                                                <BaseInput @ref="AddToBaseInputs" Model="Entry" Property="value.Property" ReadOnly="!AddingMode && value.Property.IsKey()" Service="Service" ModelLocalizer="ModelLocalizer" OnBeforePropertyChanged="(args) => OnBeforePropertyChanged.InvokeAsync(args)" OnAfterPropertyChanged="(args) => OnAfterPropertyChanged.InvokeAsync(args)" />
                                                            }
                                                        </FieldBody>
                                                    </Field>
                                                </Fields>
                                            </Column>
                                        }
                                    </Row>
                                </CollapseBody>
                            </Collapse>
                        }

                        @foreach (var listProperty in ListProperties)
                        {
                            <Collapse Visible="true">
                                <CollapseHeader>
                                    <Heading Size="HeadingSize.Is4">
                                        <Button>@ModelLocalizer[listProperty.Value.DisplayGroup]</Button>
                                    </Heading>
                                </CollapseHeader>
                                <CollapseBody>
                                    <BaseListPart Model="Entry"
                                                  Property="listProperty.Key"
                                                  Service="Service"
                                                  OnBeforeAddListEntry="(args) => OnBeforeAddListEntry.InvokeAsync(args)"
                                                  OnAfterAddListEntry="(args) => OnAfterAddListEntry.InvokeAsync(args)"
                                                  OnBeforeUpdateListEntry="(args) => OnBeforeUpdateListEntry.InvokeAsync(args)"
                                                  OnAfterUpdateListEntry="(args) => OnAfterUpdateListEntry.InvokeAsync(args)"
                                                  OnBeforeRemoveListEntry="(args) => OnBeforeRemoveListEntry.InvokeAsync(args)"
                                                  OnAfterRemoveListEntry="(args) => OnAfterRemoveListEntry.InvokeAsync(args)"
                                                  OnBeforeListPropertyChanged="(args) => OnBeforeListPropertyChanged.InvokeAsync(args)"
                                                  OnAfterListPropertyChanged="(args) => OnAfterListPropertyChanged.InvokeAsync(args)" />
                                </CollapseBody>
                            </Collapse>
                        }
                    </Accordion>
                }
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary" Clicked="RejectModal">@Localizer["Close"]</Button>
                <Button Color="Color.Primary" Clicked="SaveModal">@Localizer["Save"]</Button>
            </ModalFooter>
        </ModalContent>
    </Modal>
</div>