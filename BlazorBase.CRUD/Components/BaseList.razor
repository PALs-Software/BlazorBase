@typeparam TModel
@inherits BaseDisplayComponent

@using BlazorBase.Components

<h3>
    @PluralDisplayName
    <Button Color="Color.Success" Clicked="AddEntryAsync"><Icon Name="IconName.Add" /></Button>
</h3>

<table class="table table-hover">
    <thead>
        <tr>
            <th></th>
            @foreach (var displayGroup in DisplayGroups)
            {
                @foreach (var value in displayGroup.Value)
                {
                    <td>
                        @ModelLocalizer[value.Property.Name]
                    </td>
                }
            }
        </tr>
    </thead>
    <tbody>
        <Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize ItemsProvider="LoadListDataProviderAsync">
            <tr>
                <td>
                    <Buttons>
                        <Button Color="Color.Primary" Clicked="() => EditEntryAsync(context)"><Icon Name="IconName.Edit" /></Button>
                        <Button Color="Color.Danger" Clicked="() => RemoveEntryAsync(context)"><Icon Name=" IconName.Delete" /></Button>
                    </Buttons>
                </td>

                @foreach (var displayGroup in DisplayGroups)
                {
                    @foreach (var value in displayGroup.Value)
                    {
                        <td>
                            @value.Property.GetValue(context)
                        </td>
                    }
                }
            </tr>
        </Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize>
    </tbody>
</table>

<BaseCard @ref="BaseCard"
          TModel="TModel"
          SingleDisplayName="@SingleDisplayName"
          OnCardClosed="OnCardClosedAsync"
          OnBeforeAddEntry="(args) => OnBeforeAddEntry.InvokeAsync(args)"
          OnAfterAddEntry="CardOnAfterAddEntry"
          OnBeforeUpdateEntry="(args) => OnBeforeUpdateEntry.InvokeAsync(args)"
          OnAfterUpdateEntry="CardOnAfterUpdateEntry"
          OnBeforePropertyChanged="(args) => OnBeforePropertyChanged.InvokeAsync(args)"
          OnAfterPropertyChanged="(args) => OnAfterPropertyChanged.InvokeAsync(args)"
          OnBeforeAddListEntry="(args) => OnBeforeAddListEntry.InvokeAsync(args)"
          OnAfterAddListEntry="(args) => OnAfterAddListEntry.InvokeAsync(args)"
          OnBeforeUpdateListEntry="(args) => OnBeforeUpdateListEntry.InvokeAsync(args)"
          OnAfterUpdateListEntry="(args) => OnAfterUpdateListEntry.InvokeAsync(args)"
          OnBeforeRemoveListEntry="(args) => OnBeforeRemoveListEntry.InvokeAsync(args)"
          OnAfterRemoveListEntry="(args) => OnAfterRemoveListEntry.InvokeAsync(args)"
          OnBeforeListPropertyChanged="(args) => OnBeforeListPropertyChanged.InvokeAsync(args)"
          OnAfterListPropertyChanged="(args) => OnAfterListPropertyChanged.InvokeAsync(args)" />

<ConfirmDialog @ref="ConfirmDialog" Title="@ConfirmDialogDeleteTitle" ConfirmButtonText="@Localizer["ConfirmDelete"]" ConfirmButtonColor="Color.Danger" OnConfirmDialogClosed="OnConfirmDialogClosedAsync">
    <span>
        @ConfirmDialogDeleteMessage
    </span>
</ConfirmDialog>