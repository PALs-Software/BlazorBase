@typeparam TModel
@inherits BaseDisplayComponent

@if (!HideTitle)
{
    <Heading Margin="Margin.Is2.FromTop">
        @PluralDisplayName
    </Heading>
}

<BasePageActions BaseModel="null" BaseModelType="TModelType" GUIType="Enums.GUIType.List" EventServices="EventServices" ModelLocalizer="ModelLocalizer" OnPageActionInvoked="OnPageActionInvokedAsync" />

<Alert Class="invalid-summary-feedback" Color="Color.Danger" Visible="ShowInvalidFeedback">
    @InvalidSummaryFeedback
</Alert>

<table class="table table-hover">
    <thead>
        <tr>
            <th class="th-actions">
                @if (UserCanAddEntries)
                {
                    <Button Color="Color.Success" Clicked="AddEntryAsync"><Icon Name="IconName.Add" /></Button>
                }
            </th>
            @foreach (var displayGroup in DisplayGroups)
            {
                @foreach (var displayItem in displayGroup.Value.DisplayItems.Where(p => !p.IsListProperty))
                {
                    <th @onclick="async () => await OnSortClicked(displayItem, false)"
                        @oncontextmenu="async () => await OnSortClicked(displayItem, true)"
                        @oncontextmenu:preventDefault="true"
                        Style="@(Sortable && displayItem.IsSortable ? "cursor: pointer;" : String.Empty)">

                        <div class="sortable-table-header">
                            @GetPropertyCaption(EventServices, new TModel(), ModelLocalizer, displayItem)

                            @if (displayItem.SortDirection != Enums.SortDirection.None)
                            {
                                <Icon Name="@(displayItem.SortDirection == Enums.SortDirection.Ascending ? IconName.SortUp : IconName.SortDown)" />
                            }
                        </div>
                    </th>
                }
            }
        </tr>
        @if (Filterable)
        {
            <BaseListFilter ListDisplayGroups="DisplayGroups"
                            OnFilterChanged="OnFilterChangedAsync" />
        }
    </thead>
    <tbody>
        <Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize ItemsProvider="LoadListDataProviderAsync" @ref="VirtualizeList">
            <tr>
                <td>
                    <Buttons>
                        @if (UserCanEditEntries)
                        {
                            <Button Color="Color.Primary" Clicked="() => EditEntryAsync(context)"><Icon Name="IconName.Edit" /></Button>
                        }
                        @if (UserCanDeleteEntries)
                        {
                            <Button Color="Color.Danger" Clicked="() => RemoveEntryAsync(context)"><Icon Name=" IconName.Delete" /></Button>
                        }
                    </Buttons>
                </td>

                @foreach (var displayGroup in DisplayGroups)
                {
                    @foreach (var displayItem in displayGroup.Value.DisplayItems.Where(p => !p.IsListProperty))
                    {
                        <td>
                            @{
                                var renderFragment = CheckIfPropertyRenderingIsHandledAsync(displayItem, context).Result;
                                if (renderFragment != null)
                                {
                                    @renderFragment
                                }
                                else
                                {
                                    @if (ForeignKeyProperties.ContainsKey(displayItem.Property))
                                    {
                                        @DisplayForeignKey(displayItem, context)
                                    }
                                    else if (displayItem.Property.PropertyType.IsEnum)
                                    {
                                        @DisplayEnum(displayItem, context)
                                    }
                                    else
                                    {
                                        if (displayItem.Property.PropertyType == typeof(DateTime) || displayItem.Property.PropertyType == typeof(DateTime?))
                                        {
                                            if (displayItem.DateInputMode == DateInputMode.Date)
                                            {
                                                @(((DateTime?)displayItem.Property.GetValue(context))?.ToShortDateString())
                                            }
                                            else
                                            {
                                                @(((DateTime?)displayItem.Property.GetValue(context))?.ToString())
                                            }
                                        }
                                        else if (displayItem.Property.PropertyType == typeof(bool) || displayItem.Property.PropertyType == typeof(bool?))
                                        {
                                            if (displayItem.Property.GetValue(context) != null)
                                            {
                                                <Check TValue="bool?" Checked="@((bool?) displayItem.Property.GetValue(context))" Disabled="true" ReadOnly="true" />
                                            }
                                        }
                                        else
                                        {
                                            @displayItem.Property.GetValue(context)
                                        }
                                    }
                                }
                            }
                        </td>
                    }
                }
            </tr>
        </Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize>
    </tbody>
</table>

@if (!DontRenderCard)
{
    <BaseModalCard @ref="BaseModalCard"
                   TModel="TModel"
                   SingleDisplayName="@SingleDisplayName"
                   ExplainText="@ExplainText"
                   ComponentModelInstance="ComponentModelInstance"
                   OnCardClosed="OnCardClosedAsync"
                   OnCreateNewEntryInstance="(args) => OnCreateNewEntryInstance.InvokeAsync(args)"
                   OnBeforeAddEntry="(args) => OnBeforeAddEntry.InvokeAsync(args)"
                   OnAfterAddEntry="(args) => OnAfterAddEntry.InvokeAsync(args)"
                   OnBeforeUpdateEntry="(args) => OnBeforeUpdateEntry.InvokeAsync(args)"
                   OnAfterUpdateEntry="(args) => OnAfterUpdateEntry.InvokeAsync(args)"
                   OnBeforeConvertPropertyType="(args) => OnBeforeConvertPropertyType.InvokeAsync(args)"
                   OnBeforePropertyChanged="(args) => OnBeforePropertyChanged.InvokeAsync(args)"
                   OnAfterPropertyChanged="(args) => OnAfterPropertyChanged.InvokeAsync(args)"
                   OnAfterSaveChanges="(args) => OnAfterSaveChanges.InvokeAsync(args)"
                   OnCreateNewListEntryInstance="(args) => OnCreateNewListEntryInstance.InvokeAsync(args)"
                   OnBeforeAddListEntry="(args) => OnBeforeAddListEntry.InvokeAsync(args)"
                   OnAfterAddListEntry="(args) => OnAfterAddListEntry.InvokeAsync(args)"
                   OnBeforeRemoveListEntry="(args) => OnBeforeRemoveListEntry.InvokeAsync(args)"
                   OnAfterRemoveListEntry="(args) => OnAfterRemoveListEntry.InvokeAsync(args)"
                   OnBeforeConvertListPropertyType="(args) => OnBeforeConvertListPropertyType.InvokeAsync(args)"
                   OnBeforeListPropertyChanged="(args) => OnBeforeListPropertyChanged.InvokeAsync(args)"
                   OnAfterListPropertyChanged="(args) => OnAfterListPropertyChanged.InvokeAsync(args)"
                   OnAfterMoveListEntryUp="(args) => OnAfterMoveListEntryUp.InvokeAsync(args)"
                   OnAfterMoveListEntryDown="(args) => OnAfterMoveListEntryDown.InvokeAsync(args)" />
}