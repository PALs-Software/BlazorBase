@using BlazorBase.Modules;
@using BlazorBase.MessageHandling.Models;

@foreach (var modalInfo in ModalInfos)
{
    if (modalInfo.Value.Args is ShowFileInputDialogArgs args)
    {
        <LoadingIndicator @key="modalInfo" Visible="args.ShowLoadingIndicator">
            @Localizer["Uploading file..."]
            <Progress Size="Size.ExtraLarge" Margin="Margin.Is4.FromLeft.Is4.FromRight">
                <ProgressBar Value="args.UploadProgress" Animated="true" Striped="true">
                    @args.UploadProgress %
                </ProgressBar>
            </Progress>
        </LoadingIndicator>

        <Modal @key="modalInfo" @ref="modalInfo.Value.Modal" Visible="true" Closing="async (closingArgs) => await OnModalClosing(modalInfo.Value, closingArgs)" Closed="() => OnModalClosed(modalInfo.Key)" Style="z-index:9999" ShowBackdrop="false">
            <ModalContent Centered="true" Size="args.ModalSize">
                <ModalHeader>
                    <ModalTitle>
                        <BaseIcon IconName="args.Icon" Style="@args.IconStyle"></BaseIcon>
                        @args.Title
                    </ModalTitle>
                    <CloseButton />
                </ModalHeader>
                <ModalBody>
                    <p>
                        @BaseMarkupStringValidator.GetWhiteListedMarkupString(@modalInfo.Value.Args.Message)
                    </p>

                    <Fields>
                        <Field Horizontal="true">
                            <FieldLabel ColumnSize="ColumnSize.Is4">@args.FileInputCaption</FieldLabel>
                            <FieldBody ColumnSize="ColumnSize.Is8">
                                <FileEdit Multiple="false" Filter="@args.FileFilter" Changed="async (fileChangedArgs) => await OnValueChangedAsync(fileChangedArgs, modalInfo.Value)" Progressed="(progressArgs) => OnUploadProgressed(progressArgs, args)" Class="@args.InputClass" AutoReset="true" />
                            </FieldBody>
                        </Field>
                        <div class="@args.FeedbackClass">
                            @args.Feedback
                        </div>
                    </Fields>
                </ModalBody>
                <ModalFooter>                    
                    <Button Color="args.CloseButtonColor" Clicked="() => OnAbortButtonClicked(modalInfo.Value)">@args.CloseButtonText</Button>
                </ModalFooter>
            </ModalContent>
        </Modal>
    }
}