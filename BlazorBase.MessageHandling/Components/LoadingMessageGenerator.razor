@using BlazorBase.Modules;
@using BlazorBase.MessageHandling.Models;

<LoadingIndicator Visible="Visible">
    @foreach (var messagePair in LoadingMessages)
    {
        var message = messagePair.Value;
        var progressArgs = message as ShowLoadingProgressMessageArgs;

        <div @key="message" class="mb-4">

            @if (progressArgs != null && progressArgs.OnAborting != null)
            {
                <div class="blazor-base-loading-message-generator-abort-button">
                    <a @onclick="() => OnAbortButtonClickedAsync(messagePair.Key, progressArgs)">
                        @progressArgs.AbortButtonText
                    </a>
                </div>
            }
            <div>
                @message.Message

                @if (message.LoadingChildContent != null)
                {
                    @message.LoadingChildContent
                }
            </div>

            @if (progressArgs != null)
            {
                <Progress Size="Size.ExtraLarge" Margin="Margin.Is4.FromLeft.Is4.FromRight">
                    <ProgressBar Value="progressArgs.CurrentProgress" Animated="true" Striped="true">
                        @if (!String.IsNullOrEmpty(progressArgs.ProgressText))
                        {
                            @progressArgs.ProgressText
                        }

                        @if (progressArgs.ShowProgressInText)
                        {
                            <text>@progressArgs.CurrentProgress %</text>
                        }
                    </ProgressBar>
                </Progress>
            }
        </div>
    }
</LoadingIndicator>